{"meta":{"title":"《我的千岁寒》","subtitle":"前端相关的知识点以及其它··","description":"看到自己的世界并勇敢的长大！","author":"akreturn","url":"http://yoursite.com"},"pages":[{"title":"404 今生不见，来生再续","date":"2018-09-17T07:03:42.355Z","updated":"2018-09-17T07:03:42.355Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com//404.html","excerpt":"","text":"页面飞了，拜了个拜……"},{"title":"","date":"2018-09-17T06:55:51.196Z","updated":"2018-09-17T06:55:51.196Z","comments":true,"path":"404/404.html","permalink":"http://yoursite.com/404/404.html","excerpt":"","text":""},{"title":"个人简介","date":"2018-09-15T13:54:50.000Z","updated":"2018-09-15T14:00:05.851Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"关于我测试 about 的创建123hexo new page ***// 然后在相关的md文件进行创作"},{"title":"books","date":"2018-09-15T14:03:25.000Z","updated":"2018-09-15T14:03:25.281Z","comments":true,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"","date":"2018-09-17T08:31:13.142Z","updated":"2018-09-17T08:31:13.142Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-09-17T08:23:46.662Z","updated":"2018-09-17T08:23:46.662Z","comments":true,"path":"czsc/index.html","permalink":"http://yoursite.com/czsc/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-09-15T14:03:54.000Z","updated":"2018-09-15T14:03:54.661Z","comments":true,"path":"javascript/index.html","permalink":"http://yoursite.com/javascript/index.html","excerpt":"","text":""},{"title":"友链","date":"2018-09-15T14:02:48.000Z","updated":"2018-09-15T14:03:11.335Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"","date":"2018-09-17T08:19:03.709Z","updated":"2018-09-17T08:19:03.709Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"svn连接https报错问题: E230001: Server SSL certificate verification failed: certificateissued","slug":"idea/svn连接https报错问题: E230001: Server SSL certificate verification failed: certificateissued","date":"2018-10-17T02:38:53.000Z","updated":"2018-10-17T02:49:05.512Z","comments":true,"path":"2018/10/17/idea/svn连接https报错问题: E230001: Server SSL certificate verification failed: certificateissued/","link":"","permalink":"http://yoursite.com/2018/10/17/idea/svn连接https报错问题: E230001: Server SSL certificate verification failed: certificateissued/","excerpt":"","text":"使用idea下代码时报了错E170013 E230001: Server SSL certificate verification failed: certificate issued、网上找了下相同的问题，在此记录下解决方案cmd打开运行窗口，执行以下命令1svn ls https://xxxxxx是具体的svn项目地址最后会显示1(R)eject, accept (t)emporarily or accept (p)ermanently?输入p即可然后根据提示输入svn账户名UserName和密码Password最后checkout from subversion刷新一下就好了","categories":[{"name":"错误处理","slug":"错误处理","permalink":"http://yoursite.com/categories/错误处理/"}],"tags":[{"name":"webstrom","slug":"webstrom","permalink":"http://yoursite.com/tags/webstrom/"},{"name":"Idea","slug":"Idea","permalink":"http://yoursite.com/tags/Idea/"}]},{"title":"什么是元数据？以及元数据的核心概念","slug":"什么是元数据？以及元数据的核心概念","date":"2018-10-16T09:36:26.000Z","updated":"2018-10-16T09:42:32.631Z","comments":true,"path":"2018/10/16/什么是元数据？以及元数据的核心概念/","link":"","permalink":"http://yoursite.com/2018/10/16/什么是元数据？以及元数据的核心概念/","excerpt":"","text":"文章系转载，仅供个人学习和参考一、元数据什么鬼?我入职的时候刚好赶上公司的元数据产品升级换代，同事们的研发气氛正火热，作为新入职菜鸟，总得先了解一下元数据概念，不然日后怎么和小伙伴们愉快地玩耍，于是查找国内外相关材料：一段时间之后有了一些知识积累，才发现用“关于数据的数据”来给元数据下定义确实再准确不过了，但同时也略微抽象，新人难于快速理解，待到上周我们数据治理专家从心理学的角度来阐述元数据之后，我终于也算理解了元数据到底是个啥，今天也算是站在“巨人”的肩膀上，用一种更简单的方式来回答“元数据究竟是什么”这个问题…元数据是关于数据的描述，存储着关于数据的信息，为人们更方便地检索信息提供了帮助。咦?检索信息?小蝌蚪找妈妈的过程也是一个检索信息的过程，是不是看懂这个故事就能懂元数据是什么了?池塘里有一群小蝌蚪，他们看见鲤鱼妈妈在教小鲤鱼捕食，就迎上去，问：“鲤鱼阿姨，我们的妈妈在哪里?”此时蝌蚪们意识到，不对啊，我们的数据库里不是应该存在着一张Mother表吗，但是蝌蚪们竟然对这张表一无所知，不知道有什么字段，也不知道各个字段对应的具体数值：鲤鱼妈妈说：“你们的妈妈有四条腿，宽嘴巴。你们到那边去找吧!”鳄鱼笑着说：“你们的妈妈有两只大眼睛，披着绿衣裳。你们到那边去找吧!”…乌龟笑着说：“我不是你们的妈妈，你们的妈妈肚皮是白的，到前面去找吧。”…青蛙听了“各各”地笑起来，说“唉!傻孩子，我就是你们的妈妈呀”整个过程可以看成是Mother这张表逐步完善的过程，数据来源分别是鲤鱼妈妈、鳄鱼妈妈和乌龟妈妈，如下图所示：对蝌蚪们最终获取到的信息进行进一步抽象，就可以形成一种“元数据”，该元数据描述了Mother这张表的结构：刚才不是说元数据能为检索信息提供帮助吗，那是不是也说明元数据能为小蝌蚪找妈妈提供帮助?我们将在第二部分试着对这个故事进行改编，详细介绍小蝌蚪利用元数据快速找到妈妈的过程。二、元数据管理的应用通常一款元数据管理工具应具备元模型设计、元数据采集、元数据分析、数据地图展现等核心功能，我们试着改编小蝌蚪找妈妈这个故事，在改编的过程中理解这几个核心功能，前提是我们假设所有动物共同构成了一个庞大的数据体系，小蝌蚪们Mother的具体数据已经存在于此体系之中(鲤鱼系统、鳄鱼系统、乌龟系统)。1、元模型设计先解释一下元模型。如果说元数据是对数据的描述，那么元模型就是对元数据的描述，是对元数据的进一步抽象，三者的关系如下图所示：再讲一下元模型设计的过程。首先获取到系统中的所有元数据，将这些元数据汇总并进行合理规划，进一步抽象成元模型，从一定角度来说，可以把这个抽象的过程看成元模型设计的过程。元模型定义了各种元数据的结构以及元数据之间的关系，是元数据管理的基础，也就是说，如果我们想用元数据帮助小蝌蚪找妈妈，需要先设计出合理的元模型。下图是我试着给它们设计出的元模型(对于企业来说，真正的元模型设计过程非常复杂，受多方面因素影响)：我们认为小蝌蚪的妈妈(Mother)由若干个属性(Property)组成，每个属性的名称用Name表示，每个属性的类型用Type表示。现在元模型有了，下一步就是按照这个设计好的元模型采集小蝌蚪们需要的元数据信息，也就是我们常说的元数据采集。2、元数据采集设计好元模型之后，元数据管理工具能通过全自动的方式采集到企业所需要的元数据，在这个故事中，按照我设计好的元模型，元数据管理工具的元数据采集结果应该如下图所示：小蝌蚪们拿着这份元数据再去针对性地检索关于妈妈的信息，就能一步到位，将目标直接锁定到青蛙，整个故事将因元数据的出现而成功改写。说明：在真实的企业数据环境中，数据与元数据是已经存在于系统之中的，元数据管理就是根据企业现有的元数据设计出适合企业的元模型，然后将系统之中的元数据按照元模型集中汇总并关联到一起，达到企业对数据统一管理与应用的目的。3、元数据分析a、血缘分析假设动物园园长慢羊羊正管理着整个动物园的数据信息，有一天园长发现自己这里有个数据不对，需要找出错误数据的提供者并追究责任，那么这个错误数据来自于哪个动物家庭呢?挨家挨户去敲门核对数据显然不够高效，元数据管理工具的血缘分析功能会自动帮助园长分析这个错误数据的上游路径，比如这个数据是由鲤鱼妈妈交给鳄鱼妈妈，鳄鱼妈妈再提交给园长的，那么此时园长只需要去敲鲤鱼和鳄鱼家的门就可以了。b、影响分析数据终于更正了，此时园长需要及时提醒大家这个数据的更正信息，只需要通知这个数据影响到的动物家庭就可以了，这让园长十分苦恼，整个动物园的数据传递这么复杂，怎么判断哪个家庭会受到这个数据的影响呢，元数据管理工具的影响分析功能会分析出这个数据的影响范并能用可视化的方式展现出来，园长只需要通知受影响的动物家庭就可以了。c、数据地图展现随着动物园规模的日益扩大，入住的动物种类日益增多，有一天园长想了解动物园的整体情况，有多少动物家庭，哪个家庭和哪个家庭比较要好，哪个家庭和哪个家庭又从来没有联系，此时元数据管理工具的数据地图可以帮助园长获取到他想要的信息，数据地图展现功能可以通过可视化的方式，让园长对整个动物园的情况了如指掌，帮助它更好地观察整个动物园的情况。三、元数据的重要性在大数据时代的背景下，数据即资产，元数据实现了信息的描述和分类的格式化，从而为机器处理创造了可能，它能帮助企业更好地对数据资产进行管理，理清数据之间的关系。元数据管理是企业提升数据质量的基础，也是企业数据治理中的关键环节。元数据管理不当，信息很容易被丢失，进而不能对业务进行有效支撑，企业内部业务人员要识别相关信息就会变得十分困难，最终用户也将失去对数据的信任。","categories":[{"name":"大数据","slug":"大数据","permalink":"http://yoursite.com/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"http://yoursite.com/tags/大数据/"}]},{"title":"缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（三）","slug":" 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（三）","date":"2018-09-21T01:32:23.866Z","updated":"2018-09-21T01:42:05.681Z","comments":true,"path":"2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（三）/","link":"","permalink":"http://yoursite.com/2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（三）/","excerpt":"","text":"有这般汉，妄将禅宗学问化，以可怜之分别心，立此规律、彼特点，造大诠释、总体系，终乃测海算沙之书蠹矣。如妄论“立处皆真”，则能立非立，所立皆非，立无可立，谁真谁假？如妄论“一切现成”，则现无可现，能成非成，一切成非，谁现谁成？如妄论“不二法门”，则不二而二，二而不二，分别无二，谁分谁别？如妄论“不住一切”，则不住而住，住而不住，谁住一切，一切住谁？如妄论“了无所得”，则了无可了，得无所得，无得犹得，谁了谁得？如妄论 “能所俱泯”，则能所能能、所能所所，能能所能、所所能所，谁能谁所，能谁所谁，泯而不泯、俱而非俱，能泯能俱、非所非能！诗曰：无生尽日欢，何来生死疑。有疑因患有，有患自缠丝。浮云万世名，粪土千年碑。此身更无寄，未住早已离。依依河边柳，呦呦林中麋。日日皆好日，时时作花时。潮起复潮落，月圆复月亏。世本无多事，何在有无为。莫窃尘上珠，莫恋法中奇。明珠岂属有，说无亦是痴。无有全不立，犹在鬼作思。坐看天地转，起看天地垂。雁行风过水，花落月临枝。法法皆无染，尘尘皆不遗。廓然泯凡圣，悠然入喜悲。生死凭一笑，净污两由之。死生众生恩，净污众生慈。空花演佛事，幻镜戏魔师。赴劫千身去，行难一愿随。阿鼻空未空，菩提期未期。琴歌自澹漫，莫向月中窥。","categories":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/categories/缠中说禅/"}],"tags":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/tags/缠中说禅/"},{"name":"数学","slug":"数学","permalink":"http://yoursite.com/tags/数学/"}]},{"title":"缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（七）","slug":" 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（七）","date":"2018-09-21T01:32:22.952Z","updated":"2018-09-21T01:44:58.533Z","comments":true,"path":"2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（七）/","link":"","permalink":"http://yoursite.com/2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（七）/","excerpt":"","text":"世上一切之宗教、信仰，虽异而实同，即非我同类则魔则恶、不信我者则恶则魔，所谓顺者昌、逆者亡，皆贪嗔痴疑慢之业也。禅者，无我可我、无类可类，无非可非、无禅可禅，无佛可成、无魔可灭，一切同异、顺逆，一律平等。蓋所谓平等，无使之平等者，本来平等，又何须平等之。如平等者须平等之乃可平等，使之平等者必凌驾于上，非平等也。世上一切主张平等者，皆羊头狗肉之辈，实乃假所谓平等之名词妖言惑众、谋私求利也。一切众生，无始以来一律平等。若人鼓吹有一物一人一事可凌驾于余物余人余事者，其人不过贪嗔痴疑慢五毒猖獗，信其人其言者，则是贪嗔痴疑慢与之相应，闹剧一场。禅者，非神非圣、非上帝非主宰，非人之之人、非物之之物，非心非我、非佛非魔。一切能平等者、所平等者，能之所之，皆因缘和合。禅者，非能非所、非因非缘。众生非因禅而平等，众生非因禅而成佛，说禅 “明心见性、顿悟成佛” 者，大误矣。若有佛可成，则有魔可成。可成佛，则可成魔。而本无佛可成，则也无魔可成可灭。天堂地狱，惟心所造。所谓轮回，实无所轮回而轮回也。一切本来平等，固有世间一切不平等。若一切须平等而平等，则世间无所谓不平等。世间一切不平等，本无所据，皆惟心惟言所造，人以贪嗔痴疑慢而固之。世间一切不平等，惟以不平等去之，而所谓去，本无所去，皆不平等而不平等也。蓋世间之不平等，本无所据，因缘和合生之灭之，恒变不居。世间由此而学问、学说、信仰、宗教者，妄求以各自所谓平等、统一之理论、逻辑等结构解释世界、构造世界，皆捞空捉影、痴心妄想也。禅者，非世间非出世间。世界，本来平等。所谓本来，非本非来，是名本来。诗曰：三界迷尘侵海色，一星无语枕霄寒。狂虬折足惊滩堕，碧溅龙泉指上弹。","categories":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/categories/缠中说禅/"}],"tags":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/tags/缠中说禅/"},{"name":"数学","slug":"数学","permalink":"http://yoursite.com/tags/数学/"}]},{"title":"缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（六）","slug":" 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（六）","date":"2018-09-21T01:32:22.152Z","updated":"2018-09-21T01:43:57.612Z","comments":true,"path":"2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（六）/","link":"","permalink":"http://yoursite.com/2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（六）/","excerpt":"","text":"错解之于禅，莫过于以禅为个体之身心修炼、修养，进而耍嘴皮、动笔头亦为禅矣。如此之禅，实乃无聊文人、有闲阶级之无聊把戏。以此所谓禅而招摇撞骗者，古今多矣。蓋禅为学问、学说，则乃最激进之革命、令一切统治者发抖之学问、学说。禅乃否定一切主义之主义，禅乃否定一切思想之思想，禅乃否定一切秩序之秩序，禅乃否定一切信仰之信仰，禅乃否定一切科学之科学。禅，否定一切，以及否定自身。蓋禅，復乃肯定一切主义之主义，肯定一切思想之思想，肯定一切秩序之秩序，肯定一切信仰之信仰，肯定一切科学之科学。禅，肯定一切，以及肯定自身。禅，非思想即思想，非主义即主义，非秩序即秩序，非信仰即信仰，非科学即科学。禅，非神秘主义之臆想。禅，丝毫不与耳闻眼见相背离。禅，无古无今、恒古恒今。禅，无关復相关于诸如种族、肤色、文化、思想、传统、道德、阶级者。禅，非人所独有，宇宙间古往今来一切众生，存在非存在、可见非可见，一切种类，无论高低、圣凡，皆与之无关而相关，一律平等无二矣。诗曰：乾坤处处净，何来污与秽。万物等无差，庸人自执爱。莲舟空无有，什么都能载。识取衣中宝，莫被文字碍。","categories":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/categories/缠中说禅/"}],"tags":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/tags/缠中说禅/"},{"name":"数学","slug":"数学","permalink":"http://yoursite.com/tags/数学/"}]},{"title":"缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（五）","slug":" 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（五）","date":"2018-09-21T01:32:21.656Z","updated":"2018-09-21T01:35:04.505Z","comments":true,"path":"2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（五）/","link":"","permalink":"http://yoursite.com/2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（五）/","excerpt":"","text":"夫禅，即一切非一切。禅者，即禅宗非禅宗。禅宗者，非禅宗，是名禅宗。执禅宗所谓历史而学问者，于禅宗无关，于禅亦无关矣。蓋无关之于无关且犹多有相关者，禅宗之所谓历史，亦于此无关之相关而展开也。释迦拈花、迦叶微笑，达摩西来、花开五叶，是耶、非耶，知者自知，不必追究也无须追究。所谓如来禅、祖师禅之争讼，乃无事生非。纵会得祖师禅者，亦阶下汉也。若论诸如棒喝、公案、话头、机锋等，则大似无端作怪矣。禅者，即迷非迷、即缠非缠，非悟即悟、非解即解。求解脱者无解脱、不求解脱者也无解脱，因解成缠、因悟成迷。所谓顿悟者，非顿悟，是名顿悟。所谓三关者，非三关，是名三关。佛法无多子、禅宗无多子、乾坤今古无多子，虽如此，此间事、犹需一一透脱。所谓透脱者，非透脱，是名透脱也。诗曰：可怜网中客，流转自颠错。四大谁为住，天地谁入镬。形神空无有，何缚何所缚。缘生非一体，如幻相映烁。糊涂识物始，忧患起年弱。五蕴妄成织，形器终难托。尘念随境逐，三界怅寥廓。宿习随行消，福田莫令薄。盲龟苦海渡，孔木曷能获。浮华镜里梦，须臾已舟壑。贫子衣安在，明珠诚凿凿。","categories":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/categories/缠中说禅/"}],"tags":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/tags/缠中说禅/"},{"name":"数学","slug":"数学","permalink":"http://yoursite.com/tags/数学/"}]},{"title":"缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（四）","slug":" 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（四）","date":"2018-09-21T01:32:20.793Z","updated":"2018-09-21T01:34:31.274Z","comments":true,"path":"2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（四）/","link":"","permalink":"http://yoursite.com/2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（四）/","excerpt":"","text":"除此学问化之臆测，实践化之妄行亦狮子虫所好之能事。且不论彼一味之枯坐，即此万里行脚又何曾移却半步？即此万劫不朽、万槲舍利，又与禅何干？知不知，行非行，知得行得犹是呆汉！诸如儒道所谓学问、实践者，好论所谓知行之关系。如知易行难、知难行易，先知后行、先行后知、知行合一、即知即行，凡此种种，皆乃乾慧狂想之所生矣。而知外无行、行外无知，非知即知、非行即行，一犹非一、何合何一乎？诸如哲学所谓学问、实践者，好论所谓心物之关系。如心一物二、心二物一，心物一如、心物二元，非心非物、即心即物，凡此种种，皆乃乾慧狂想之所生矣。而心外无物、物外无心，非心即心、非物即物，非即即非、心物物心，一而不一、二而不二，不一不二，谁一谁二乎？诸如宗教所谓学问、实践者，好论所谓解缚、圣凡、净污之关系。如神圣我凡、神解我缚、神我一如、神净我污，凡此种种，皆乃乾慧狂想之所生矣。而我本非我、神本非神、圣本非圣、凡本非凡、一如非如、如一非一、因解成缚、因净成污、非因即因、非成即成、因成成因、谁因谁成乎？诗曰：人生是梦梦何如，雁落秋山月落湖。半辈常怀千岁怨，一生永处两分途。谁寻生又谁寻死，谁作主来谁作奴。谁到无门无走处，无门早入死人窟。谁为迷又谁为醒，谁是净来谁是污。谁有无得无证物，无得已使大树枯。死人窟里嚼大树，庄子梦中惹蝶哭。哭碎山秋湖下月，雁惊回望到天竺。","categories":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/categories/缠中说禅/"}],"tags":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/tags/缠中说禅/"},{"name":"数学","slug":"数学","permalink":"http://yoursite.com/tags/数学/"}]},{"title":"缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（二）","slug":" 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（二）","date":"2018-09-21T01:30:38.609Z","updated":"2018-09-21T01:32:17.139Z","comments":true,"path":"2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（二）/","link":"","permalink":"http://yoursite.com/2018/09/21/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（二）/","excerpt":"","text":"蓋云门法眼以来，禅宗大盛而衰，今惟余算沙数宝食唾之辈矣。禅者，无古无今，即古即今，与释迦老汉、达摩老儿何干？惠能之辈，即如云门所说打杀喂狗，于禅何损？于惠能何损？五宗七派，即能笼天盖地、光耀千秋，于禅何增？于五宗七派何增？有这般食唾汉，以“不立文字，教外别传，直指人心，见性成佛”为禅宗宗旨。然无心可指、能指非心，无佛可成、能成非佛，何以妄论“直指人心，见性成佛”乎？教外宗门岂可妄生分别，禅宗典籍于大藏之内犹多，何以妄论“不立文字，教外别传”乎？同异者，痴人之妄生分别矣。岂只教外宗门无别，三教九流、神魔鬼怪、正统异端、天堂地狱、正反善恶，于禅又何别、何同？或言禅有所传承者，皆乱语胡言也。如迦叶因释迦拈花而有所得、达摩于惠可断臂而有所传，则释迦、迦叶、达摩、惠可，皆瞎眼鼠之辈矣。禅者，无传无得、復何传何得？倘实执“禅者，无传无得”，则乃作茧自缚、可笑可怜矣！诗曰：浮世多拙意，算计总失机。俯仰真亦假，浮沉是已非。真假全少义，是非皆多违。骑鹤赴扬州，逐鹿望京畿。鹤冲双翅折，鹿死几人归。春回杨柳青，冬至雨雪霏。碧水跨山去，白马过隙飞。谁心观日月，谁耳听嘲讥。万事元幻化，鹿鹤不可祈。陟彼南山石，南山何巍巍。靡迤林陵莽，阡陌麦苗肥。嵯峨藏异兽，陂陀步锦翚。高岩覆清阴，幽壑满白薇。天崩忽倾雨，惊云乱景晖。飙风折盘木，奔洪缺石圻。虬蛟舞金爪，駻突脱玉玑。山削千尺土，海泻万重围。山海穷迹处，月明星未稀。流光幻五彩，剑气拂霓衣。云间蔼蔼木，涧底郁郁菲。乾坤袖中笼，日月尘里微。驱马猎秋原，垂竿钓夏矶。偶作蜉蝣灭，时生龙虎威。澶漫无清浊，悠然续琴徽。","categories":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/categories/缠中说禅/"}],"tags":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/tags/缠中说禅/"},{"name":"数学","slug":"数学","permalink":"http://yoursite.com/tags/数学/"}]},{"title":"javascript - 入门篇-JavaScript 的基本语法","slug":"javascript - 入门篇-JavaScript 的基本语法","date":"2018-09-17T15:07:36.820Z","updated":"2018-09-17T15:38:05.090Z","comments":true,"path":"2018/09/17/javascript - 入门篇-JavaScript 的基本语法/","link":"","permalink":"http://yoursite.com/2018/09/17/javascript - 入门篇-JavaScript 的基本语法/","excerpt":"","text":"原文作者：阮一峰 原文地址：https://wangdoc.com/文章系转载，仅供个人学习和参考语句JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。1var a = 1 + 3;这条语句先用var命令，声明了变量a，然后将1 + 3的运算结果赋值给变量a。1 + 3叫做表达式（expression），指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。1var a = 1 + 3 ; var b = 'abc';分号前面可以没有任何内容，JavaScript 引擎将其视为空语句。1;;;上面的代码就表示3个空语句。表达式不需要分号结尾。一旦在表达式后面添加分号，则 JavaScript 引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。121 + 3;'abc';上面两行语句只是单纯地产生一个值，并没有任何实际的意义。变量概念变量是对“值”的具名引用。变量就是为“值”起名，然后引用这个名字，就等同于引用这个值。变量的名字就是变量名。1var a = 1;上面的代码先声明变量a，然后在变量a与数值1之间建立引用关系，称为将数值1“赋值”给变量a。以后，引用变量名a就会得到数值1。最前面的var，是变量声明命令。它表示通知解释引擎，要创建一个变量a。注意，JavaScript 的变量名区分大小写，A和a是两个不同的变量。变量的声明和赋值，是分开的两个步骤，上面的代码将它们合在了一起，实际的步骤是下面这样。12var a;a = 1;如果只是声明变量而没有赋值，则该变量的值是undefined。undefined是一个特殊的值，表示“无定义”。12var a;a // undefined如果变量赋值的时候，忘了写var命令，这条语句也是有效的。123var a = 1;// 基本等同a = 1;但是，不写var的做法，不利于表达意图，而且容易不知不觉地创建全局变量，所以建议总是使用var命令声明变量。如果一个变量没有声明就直接使用，JavaScript 会报错，告诉你变量未定义。12x// ReferenceError: x is not defined上面代码直接使用变量x，系统就报错，告诉你变量x没有声明。可以在同一条var命令中声明多个变量。1var a, b;JavaScript 是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型。12var a = 1;a = 'hello';上面代码中，变量a起先被赋值为一个数值，后来又被重新赋值为一个字符串。第二次赋值的时候，因为变量a已经存在，所以不需要使用var命令。如果使用var重新声明一个已经存在的变量，是无效的。123var x = 1;var x;x // 1上面代码中，变量x声明了两次，第二次声明是无效的。但是，如果第二次声明的时候还进行了赋值，则会覆盖掉前面的值。12345678var x = 1;var x = 2;// 等同于var x = 1;var x;x = 2;变量提升JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。12console.log(a);var a = 1;上面代码首先使用console.log方法，在控制台（console）显示变量a的值。这时变量a还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。123var a;console.log(a);a = 1;最后的结果是显示undefined，表示变量a已声明，但还未赋值。标识符标识符（identifier）指的是用来识别各种值的合法名称。最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript 语言的标识符对大小写敏感，所以a和A是两个不同的标识符。标识符有一套命名规则，不符合规则的就是非法标识符。JavaScript 引擎遇到非法标识符，就会报错。简单说，标识符命名规则如下。· 第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）。· 第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字0-9。下面这些都是合法的标识符。1234arg0_tmp$elemπ下面这些则是不合法的标识符。123451a // 第一个字符不能是数字23 // 同上*** // 标识符不能包含星号a+b // 标识符不能包含加号-d // 标识符不能包含减号或连词线中文是合法的标识符，可以用作变量名。1var 临时变量 = 1;JavaScript 有一些保留字，不能用作标识符：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。注释源码中被 JavaScript 引擎忽略的部分就叫做注释，它的作用是对代码进行解释。Javascript 提供两种注释的写法：一种是单行注释，用//起头；另一种是多行注释，放在/和/之间。1234567// 这是单行注释/* 这是 多行 注释*/此外，由于历史上 JavaScript 可以兼容 HTML 代码的注释，所以&lt;!--和--&gt;也被视为合法的单行注释。12x = 1; &lt;!-- x = 2;--&gt; x = 3;上面代码中，只有x = 1会执行，其他的部分都被注释掉了。需要注意的是，–&gt;只有在行首，才会被当成单行注释，否则会当作正常的运算。1234567function countdown(n) &#123; while (n --&gt; 0) console.log(n);&#125;countdown(3)// 2// 1// 0上面代码中，n –&gt; 0实际上会当作n– &gt; 0，因此输出2、1、0。区块JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。对于var命令来说，JavaScript 的区块不构成单独的作用域（scope）。12345&#123; var a = 1;&#125;a // 1上面代码在区块内部，使用var命令声明并赋值了变量a，然后在区块外部，变量a依然有效，区块对于var命令不构成单独的作用域，与不使用区块的情况没有任何区别。在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如for、if、while、function等。条件语句JavaScript 提供if结构和switch结构，完成条件判断，即只有满足预设的条件，才会执行相应的语句。if 结构if结构先判断一个表达式的布尔值，然后根据布尔值的真伪，执行不同的语句。所谓布尔值，指的是 JavaScript 的两个特殊值，true表示真，false表示伪。12345if (布尔值) 语句;// 或者if (布尔值) 语句;上面是if结构的基本形式。需要注意的是，“布尔值”往往由一个条件表达式产生的，必须放在圆括号中，表示对表达式求值。如果表达式的求值结果为true，就执行紧跟在后面的语句；如果结果为false，则跳过紧跟在后面的语句。12if (m === 3) m = m + 1;上面代码表示，只有在m等于3时，才会将其值加上1。这种写法要求条件表达式后面只能有一个语句。如果想执行多个语句，必须在if的条件判断之后，加上大括号，表示代码块（多个语句合并成一个语句）。123if (m === 3) &#123; m += 1;&#125;建议总是在if语句中使用大括号，因为这样方便插入语句。注意，if后面的表达式之中，不要混淆赋值表达式（=）、严格相等运算符（===）和相等运算符（==）。尤其是赋值表达式不具有比较作用。123456var x = 1;var y = 2;if (x = y) &#123; console.log(x);&#125;// \"2\"上面代码的原意是，当x等于y的时候，才执行相关语句。但是，不小心将严格相等运算符写成赋值表达式，结果变成了将y赋值给变量x，再判断变量x的值（等于2）的布尔值（结果为true）。这种错误可以正常生成一个布尔值，因而不会报错。为了避免这种情况，有些开发者习惯将常量写在运算符的左边，这样的话，一旦不小心将相等运算符写成赋值运算符，就会报错，因为常量不能被赋值。12if (x = 2) &#123; // 不报错if (2 = x) &#123; // 报错至于为什么优先采用“严格相等运算符”（===），而不是“相等运算符”（==），请参考《运算符》章节。if…else 结构if代码块后面，还可以跟一个else代码块，表示不满足条件时，所要执行的代码。12345if (m === 3) &#123; // 满足条件时，执行的语句&#125; else &#123; // 不满足条件时，执行的语句&#125;上面代码判断变量m是否等于3，如果等于就执行if代码块，否则执行else代码块。对同一个变量进行多次判断时，多个if…else语句可以连写在一起。123456789if (m === 0) &#123; // ...&#125; else if (m === 1) &#123; // ...&#125; else if (m === 2) &#123; // ...&#125; else &#123; // ...&#125;else代码块总是与离自己最近的那个if语句配对。123456var m = 1;var n = 2;if (m !== 1)if (n === 2) console.log('hello');else console.log('world');上面代码不会有任何输出，else代码块不会得到执行，因为它跟着的是最近的那个if语句，相当于下面这样。1234567if (m !== 1) &#123; if (n === 2) &#123; console.log('hello'); &#125; else &#123; console.log('world'); &#125;&#125;如果想让else代码块跟随最上面的那个if语句，就要改变大括号的位置。12345678if (m !== 1) &#123; if (n === 2) &#123; console.log('hello'); &#125;&#125; else &#123; console.log('world');&#125;// worldswitch 结构多个if…else连在一起使用的时候，可以转为使用更方便的switch结构。12345678910switch (fruit) &#123; case \"banana\": // ... break; case \"apple\": // ... break; default: // ...&#125;上面代码根据变量fruit的值，选择执行相应的case。如果所有case都不符合，则执行最后的default部分。需要注意的是，每个case代码块内部的break语句不能少，否则会接下去执行下一个case代码块，而不是跳出switch结构。12345678910111213var x = 1;switch (x) &#123; case 1: console.log('x 等于1'); case 2: console.log('x 等于2'); default: console.log('x 等于其他值');&#125;// x等于1// x等于2// x等于其他值上面代码中，case代码块之中没有break语句，导致不会跳出switch结构，而会一直执行下去。正确的写法是像下面这样。12345678910switch (x) &#123; case 1: console.log('x 等于1'); break; case 2: console.log('x 等于2'); break; default: console.log('x 等于其他值');&#125;switch语句部分和case语句部分，都可以使用表达式。1234567switch (1 + 3) &#123; case 2 + 2: f(); break; default: neverHappens();&#125;上面代码的default部分，是永远不会执行到的。需要注意的是，switch语句后面的表达式，与case语句后面的表示式比较运行结果时，采用的是严格相等运算符（===），而不是相等运算符（==），这意味着比较时不会发生类型转换。12345678910var x = 1;switch (x) &#123; case true: console.log('x 发生类型转换'); break; default: console.log('x 没有发生类型转换');&#125;// x 没有发生类型转换上面代码中，由于变量x没有发生类型转换，所以不会执行case true的情况。这表明，switch语句内部采用的是“严格相等运算符”，详细解释请参考《运算符》一节。三元运算符 ?:JavaScript 还有一个三元运算符（即该运算符需要三个运算子）?:，也可以用于逻辑判断。1(条件) ? 表达式1 : 表达式2上面代码中，如果“条件”为true，则返回“表达式1”的值，否则返回“表达式2”的值。1var even = (n % 2 === 0) ? true : false;上面代码中，如果n可以被2整除，则even等于true，否则等于false。它等同于下面的形式。123456var even;if (n % 2 === 0) &#123; even = true;&#125; else &#123; even = false;&#125;这个三元运算符可以被视为if…else…的简写形式，因此可以用于多种场合。1234567var myVar;console.log( myVar ? 'myVar has a value' : 'myVar does not have a value')// myVar does not have a value上面代码利用三元运算符，输出相应的提示。1var msg = '数字' + n + '是' + (n % 2 === 0 ? '偶数' : '奇数');上面代码利用三元运算符，在字符串之中插入不同的值。循环语句循环语句用于重复执行某个操作，它有多种形式。while 循环While语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。12345while (条件) 语句;// 或者while (条件) 语句;while语句的循环条件是一个表达式，必须放在圆括号中。代码块部分，如果只有一条语句，可以省略大括号，否则就必须加上大括号。123while (条件) &#123; 语句;&#125;下面是while语句的一个例子。123456var i = 0;while (i &lt; 100) &#123; console.log('i 当前为：' + i); i = i + 1;&#125;上面的代码将循环100次，直到i等于100为止。下面的例子是一个无限循环，因为循环条件总是为真。123while (true) &#123; console.log('Hello, world');&#125;for 循环for语句是循环命令的另一种形式，可以指定循环的起点、终点和终止条件。它的格式如下。12345678for (初始化表达式; 条件; 递增表达式) 语句// 或者for (初始化表达式; 条件; 递增表达式) &#123; 语句&#125;for语句后面的括号里面，有三个表达式。· 初始化表达式（initialize）：确定循环变量的初始值，只在循环开始时执行一次。· 条件表达式（test）：每轮循环开始时，都要执行这个条件表达式，只有值为真，才继续进行循环。递增表达式（increment）：每轮循环的最后一个操作，通常用来递增循环变量。下面是一个例子。1234567var x = 3;for (var i = 0; i &lt; x; i++) &#123; console.log(i);&#125;// 0// 1// 2上面代码中，初始化表达式是var i = 0，即初始化一个变量i；测试表达式是i &lt; x，即只要i小于x，就会执行循环；递增表达式是i++，即每次循环结束后，i增大1。所有for循环，都可以改写成while循环。上面的例子改为while循环，代码如下。1234567var x = 3;var i = 0;while (i &lt; x) &#123; console.log(i); i++;&#125;for语句的三个部分（initialize、test、increment），可以省略任何一个，也可以全部省略。123for ( ; ; )&#123; console.log('Hello World');&#125;上面代码省略了for语句表达式的三个部分，结果就导致了一个无限循环。do…while 循环do…while循环与while循环类似，唯一的区别就是先运行一次循环体，然后判断循环条件。12345678do 语句while (条件);// 或者do &#123; 语句&#125; while (条件);不管条件是否为真，do…while循环至少运行一次，这是这种结构最大的特点。另外，while语句后面的分号注意不要省略。下面是一个例子。1234567var x = 3;var i = 0;do &#123; console.log(i); i++;&#125; while(i &lt; x);break 语句和 continue 语句break语句和continue语句都具有跳转作用，可以让代码不按既有的顺序执行。break语句用于跳出代码块或循环。1234567var i = 0;while(i &lt; 100) &#123; console.log('i 当前为：' + i); i++; if (i === 10) break;&#125;上面代码只会执行10次循环，一旦i等于10，就会跳出循环。for循环也可以使用break语句跳出循环。123456789for (var i = 0; i &lt; 5; i++) &#123; console.log(i); if (i === 3) break;&#125;// 0// 1// 2// 3上面代码执行到i等于3，就会跳出循环。continue语句用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环。1234567var i = 0;while (i &lt; 100)&#123; i++; if (i % 2 === 0) continue; console.log('i 当前为：' + i);&#125;上面代码只有在i为奇数时，才会输出i的值。如果i为偶数，则直接进入下一轮循环。如果存在多重循环，不带参数的break语句和continue语句都只针对最内层循环。标签（label）JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。12label: 语句标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。标签通常与break语句和continue语句配合使用，跳出特定的循环。1234567891011top: for (var i = 0; i &lt; 3; i++)&#123; for (var j = 0; j &lt; 3; j++)&#123; if (i === 1 &amp;&amp; j === 1) break top; console.log('i=' + i + ', j=' + j); &#125; &#125;// i=0, j=0// i=0, j=1// i=0, j=2// i=1, j=0上面代码为一个双重循环区块，break命令后面加上了top标签（注意，top不用加引号），满足条件时，直接跳出双层循环。如果break语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环。标签也可以用于跳出代码块。12345678foo: &#123; console.log(1); break foo; console.log('本行不会输出');&#125;console.log(2);// 1// 2上面代码执行到break foo，就会跳出区块。continue语句也可以与标签配合使用。1234567891011121314top: for (var i = 0; i &lt; 3; i++)&#123; for (var j = 0; j &lt; 3; j++)&#123; if (i === 1 &amp;&amp; j === 1) continue top; console.log('i=' + i + ', j=' + j); &#125; &#125;// i=0, j=0// i=0, j=1// i=0, j=2// i=1, j=0// i=2, j=0// i=2, j=1// i=2, j=2上面代码中，continue命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环。如果continue语句后面不使用标签，则只能进入下一轮的内层循环。参考链接Axel Rauschmayer, A quick overview of JavaScript","categories":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"javascript - 入门篇-历史","slug":"javascript - 入门篇-历史","date":"2018-09-17T15:01:16.833Z","updated":"2018-09-17T15:38:16.525Z","comments":true,"path":"2018/09/17/javascript - 入门篇-历史/","link":"","permalink":"http://yoursite.com/2018/09/17/javascript - 入门篇-历史/","excerpt":"","text":"原文作者：阮一峰 原文地址：https://wangdoc.com/文章系转载，仅供个人学习和参考诞生JavaScript 因为互联网而生，紧跟着浏览器的出现而问世。回顾它的历史，就要从浏览器的历史讲起。1990年底，欧洲核能研究组织（CERN）科学家 Tim Berners-Lee，在全世界最大的电脑网络——互联网的基础上，发明了万维网（World Wide Web），从此可以在网上浏览网页文件。最早的网页只能在操作系统的终端里浏览，也就是说只能使用命令行操作，网页都是在字符窗口中显示，这当然非常不方便。1992年底，美国国家超级电脑应用中心（NCSA）开始开发一个独立的浏览器，叫做 Mosaic。这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览。1994年10月，NCSA 的一个主要程序员 Marc Andreessen 联合风险投资家 Jim Clark，成立了 Mosaic 通信公司（Mosaic Communications），不久后改名为 Netscape。这家公司的方向，就是在 Mosaic 的基础上，开发面向普通用户的新一代的浏览器 Netscape Navigator。1994年12月，Navigator 发布了1.0版，市场份额一举超过90%。Netscape 公司很快发现，Navigator 浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为。当时，网速很慢而且上网费很贵，有些操作不宜在服务器端完成。比如，如果用户忘记填写“用户名”，就点了“发送”按钮，到服务器再发现这一点就有点太晚了，最好能在用户发出数据之前，就告诉用户“请填写用户名”。这就需要在网页中嵌入小程序，让浏览器检查每一栏是否都填写了。管理层对这种浏览器脚本语言的设想是：功能不需要太强，语法较为简单，容易学习和部署。那一年，正逢 Sun 公司的 Java 语言问世，市场推广活动非常成功。Netscape 公司决定与 Sun 公司合作，浏览器支持嵌入 Java 小程序（后来称为 Java applet）。但是，浏览器脚本语言是否就选用 Java，则存在争论。后来，还是决定不使用 Java，因为网页小程序不需要 Java 这么“重”的语法。但是，同时也决定脚本语言的语法要接近 Java，并且可以支持 Java 程序。这些设想直接排除了使用现存语言，比如 Perl、Python 和 TCL。1995年，Netscape 公司雇佣了程序员 Brendan Eich 开发这种网页脚本语言。Brendan Eich 有很强的函数式编程背景，希望以 Scheme 语言（函数式语言鼻祖 LISP 语言的一种方言）为蓝本，实现这种新语言。1995年5月，Brendan Eich 只用了10天，就设计完成了这种语言的第一版。它是一个大杂烩，语法有多个来源。· 基本语法：借鉴 C 语言和 Java 语言。· 数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类。· 函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包。· 原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）。· 正则表达式：借鉴 Perl 语言。· 字符串和数组处理：借鉴 Python 语言。为了保持简单，这种脚本语言缺少一些关键的功能，比如块级作用域、模块、子类型（subtyping）等等，但是可以利用现有功能找出解决办法。这种功能的不足，直接导致了后来 JavaScript 的一个显著特点：对于其他语言，你需要学习语言的各种功能，而对于 JavaScript，你常常需要学习各种解决问题的模式。而且由于来源多样，从一开始就注定，JavaScript 的编程风格是函数式编程和面向对象编程的一种混合体。Netscape 公司的这种浏览器脚本语言，最初名字叫做 Mocha，1995年9月改为 LiveScript。12月，Netscape 公司与 Sun 公司（Java 语言的发明者和所有者）达成协议，后者允许将这种语言叫做 JavaScript。这样一来，Netscape 公司可以借助 Java 语言的声势，而 Sun 公司则将自己的影响力扩展到了浏览器。之所以起这个名字，并不是因为 JavaScript 本身与 Java 语言有多么深的关系（事实上，两者关系并不深，详见下节），而是因为 Netscape 公司已经决定，使用 Java 语言开发网络应用程序，JavaScript 可以像胶水一样，将各个部分连接起来。当然，后来的历史是 Java 语言的浏览器插件失败了，JavaScript 反而发扬光大。1995年12月4日，Netscape 公司与 Sun 公司联合发布了 JavaScript 语言，对外宣传 JavaScript 是 Java 的补充，属于轻量级的 Java，专门用来操作网页。1996年3月，Navigator 2.0 浏览器正式内置了 JavaScript 脚本语言。JavaScript 与 Java 的关系这里专门说一下 JavaScript 和 Java 的关系。它们是两种不一样的语言，但是彼此存在联系。JavaScript 的基本语法和对象体系，是模仿 Java 而设计的。但是，JavaScript 没有采用 Java 的静态类型。正是因为 JavaScript 与 Java 有很大的相似性，所以这门语言才从一开始的 LiveScript 改名为 JavaScript。基本上，JavaScript 这个名字的原意是“很像Java的脚本语言”。JavaScript 语言的函数是一种独立的数据类型，以及采用基于原型对象（prototype）的继承链。这是它与 Java 语法最大的两点区别。JavaScript 语法要比 Java 自由得多。另外，Java 语言需要编译，而 JavaScript 语言则是运行时由解释器直接执行。总之，JavaScript 的原始设计目标是一种小型的、简单的动态语言，与 Java 有足够的相似性，使得使用者（尤其是 Java 程序员）可以快速上手。JavaScript 与 ECMAScript 的关系1996年8月，微软模仿 JavaScript 开发了一种相近的语言，取名为JScript（JavaScript 是 Netscape 的注册商标，微软不能用），首先内置于IE 3.0。Netscape 公司面临丧失浏览器脚本语言的主导权的局面。1996年11月，Netscape 公司决定将 JavaScript 提交给国际标准化组织 ECMA（European Computer Manufacturers Association），希望 JavaScript 能够成为国际标准，以此抵抗微软。ECMA 的39号技术委员会（Technical Committee 39）负责制定和审核这个标准，成员由业内的大公司派出的工程师组成，目前共25个人。该委员会定期开会，所有的邮件讨论和会议记录，都是公开的。1997年7月，ECMA 组织发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。这个版本就是 ECMAScript 1.0 版。之所以不叫 JavaScript，一方面是由于商标的关系，Java 是 Sun 公司的商标，根据一份授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 已经被 Netscape 公司注册为商标，另一方面也是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构，与部署环境相关的标准都由其他标准规定，比如 DOM 的标准就是由 W3C组织（World Wide Web Consortium）制定的。ECMA-262 标准后来也被另一个国际标准化组织 ISO（International Organization for Standardization）批准，标准号是 ISO-16262。JavaScript 的版本1997年7月，ECMAScript 1.0发布。1998年6月，ECMAScript 2.0版发布。1999年12月，ECMAScript 3.0版发布，成为 JavaScript 的通行标准，得到了广泛支持。2007年10月，ECMAScript 4.0版草案发布，对3.0版做了大幅升级，预计次年8月发布正式版本。草案发布后，由于4.0版的目标过于激进，各方对于是否通过这个标准，发生了严重分歧。以 Yahoo、Microsoft、Google 为首的大公司，反对 JavaScript 的大幅升级，主张小幅改动；以 JavaScript 创造者 Brendan Eich 为首的 Mozilla 公司，则坚持当前的草案。2008年7月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，ECMA 开会决定，中止 ECMAScript 4.0 的开发（即废除了这个版本），将其中涉及现有功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 Harmony（和谐）。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。2009年12月，ECMAScript 5.0版 正式发布。Harmony 项目则一分为二，一些较为可行的设想定名为 JavaScript.next 继续开发，后来演变成 ECMAScript 6；一些不是很成熟的设想，则被视为 JavaScript.next.next，在更远的将来再考虑推出。TC39 的总体考虑是，ECMAScript 5 与 ECMAScript 3 基本保持兼容，较大的语法修正和新功能加入，将由 JavaScript.next 完成。当时，JavaScript.next 指的是ECMAScript 6。第六版发布以后，将指 ECMAScript 7。TC39 预计，ECMAScript 5 会在2013年的年中成为 JavaScript 开发的主流标准，并在此后五年中一直保持这个位置。2011年6月，ECMAscript 5.1版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。到了2012年底，所有主要浏览器都支持 ECMAScript 5.1版的全部功能。2013年3月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。2013年12月，ECMAScript 6 草案发布。然后是12个月的讨论期，听取各方反馈。2015年6月，ECMAScript 6 正式发布，并且更名为“ECMAScript 2015”。这是因为 TC39 委员会计划，以后每年发布一个 ECMAScript 的版本，下一个版本在2016年发布，称为”ECMAScript 2016”，2017年发布“ECMAScript 2017”，以此类推。周边大事记JavaScript 伴随着互联网的发展一起发展。互联网周边技术的快速发展，刺激和推动了 JavaScript 语言的发展。下面，回顾一下 JavaScript 的周边应用发展。1996年，样式表标准 CSS 第一版发布。1997年，DHTML（Dynamic HTML，动态 HTML）发布，允许动态改变网页内容。这标志着 DOM 模式（Document Object Model，文档对象模型）正式应用。1998年，Netscape 公司开源了浏览器，这导致了 Mozilla 项目的诞生。几个月后，美国在线（AOL）宣布并购 Netscape。1999年，IE 5部署了 XMLHttpRequest 接口，允许 JavaScript 发出 HTTP 请求，为后来大行其道的 Ajax 应用创造了条件。2000年，KDE 项目重写了浏览器引擎 KHTML，为后来的 WebKit 和 Blink 引擎打下基础。这一年的10月23日，KDE 2.0发布，第一次将 KHTML 浏览器包括其中。2001年，微软公司时隔5年之后，发布了 IE 浏览器的下一个版本 Internet Explorer 6。这是当时最先进的浏览器，它后来统治了浏览器市场多年。2001年，Douglas Crockford 提出了 JSON 格式，用于取代 XML 格式，进行服务器和网页之间的数据交换。JavaScript 可以原生支持这种格式，不需要额外部署代码。2002年，Mozilla 项目发布了它的浏览器的第一版，后来起名为 Firefox。2003年，苹果公司发布了 Safari 浏览器的第一版。2004年，Google 公司发布了 Gmail，促成了互联网应用程序（Web Application）这个概念的诞生。由于 Gmail 是在4月1日发布的，很多人起初以为这只是一个玩笑。2004年，Dojo 框架诞生，为不同浏览器提供了同一接口，并为主要功能提供了便利的调用方法。这标志着 JavaScript 编程框架的时代开始来临。2004年，WHATWG 组织成立，致力于加速 HTML 语言的标准化进程。2005年，苹果公司在 KHTML 引擎基础上，建立了 WebKit 引擎。2005年，Ajax 方法（Asynchronous JavaScript and XML）正式诞生，Jesse James Garrett 发明了这个词汇。它开始流行的标志是，2月份发布的 Google Maps 项目大量采用该方法。它几乎成了新一代网站的标准做法，促成了 Web 2.0时代的来临。2005年，Apache 基金会发布了 CouchDB 数据库。这是一个基于 JSON 格式的数据库，可以用 JavaScript 函数定义视图和索引。它在本质上有别于传统的关系型数据库，标识着 NoSQL 类型的数据库诞生。2006年，jQuery 函数库诞生，作者为John Resig。jQuery 为操作网页 DOM 结构提供了非常强大易用的接口，成为了使用最广泛的函数库，并且让 JavaScript 语言的应用难度大大降低，推动了这种语言的流行。2006年，微软公司发布 IE 7，标志重新开始启动浏览器的开发。2006年，Google推出 Google Web Toolkit 项目（缩写为 GWT），提供 Java 编译成 JavaScript 的功能，开创了将其他语言转为 JavaScript 的先河。2007年，Webkit 引擎在 iPhone 手机中得到部署。它最初基于 KDE 项目，2003年苹果公司首先采用，2005年开源。这标志着 JavaScript 语言开始能在手机中使用了，意味着有可能写出在桌面电脑和手机中都能使用的程序。2007年，Douglas Crockford 发表了名为《JavaScript: The good parts》的演讲，次年由 O’Reilly 出版社出版。这标志着软件行业开始严肃对待 JavaScript 语言，对它的语法开始重新认识，2008年，V8 编译器诞生。这是 Google 公司为 Chrome 浏览器而开发的，它的特点是让 JavaScript 的运行变得非常快。它提高了 JavaScript 的性能，推动了语法的改进和标准化，改变外界对 JavaScript 的不佳印象。同时，V8 是开源的，任何人想要一种快速的嵌入式脚本语言，都可以采用 V8，这拓展了 JavaScript 的应用领域。2009年，Node.js 项目诞生，创始人为 Ryan Dahl，它标志着 JavaScript 可以用于服务器端编程，从此网站的前端和后端可以使用同一种语言开发。并且，Node.js 可以承受很大的并发流量，使得开发某些互联网大规模的实时应用变得容易。2009年，Jeremy Ashkenas 发布了 CoffeeScript 的最初版本。CoffeeScript 可以被转换为 JavaScript 运行，但是语法要比 JavaScript 简洁。这开启了其他语言转为 JavaScript 的风潮。2009年，PhoneGap 项目诞生，它将 HTML5 和 JavaScript 引入移动设备的应用程序开发，主要针对 iOS 和 Android 平台，使得 JavaScript 可以用于跨平台的应用程序开发。2009，Google 发布 Chrome OS，号称是以浏览器为基础发展成的操作系统，允许直接使用 JavaScript 编写应用程序。类似的项目还有 Mozilla 的 Firefox OS。2010年，三个重要的项目诞生，分别是 NPM、BackboneJS 和 RequireJS，标志着 JavaScript 进入模块化开发的时代。2011年，微软公司发布 Windows 8操作系统，将 JavaScript 作为应用程序的开发语言之一，直接提供系统支持。2011年，Google 发布了 Dart 语言，目的是为了结束 JavaScript 语言在浏览器中的垄断，提供更合理、更强大的语法和功能。Chromium浏览器有内置的 Dart 虚拟机，可以运行 Dart 程序，但 Dart 程序也可以被编译成 JavaScript 程序运行。2011年，微软工程师Scott Hanselman提出，JavaScript 将是互联网的汇编语言。因为它无所不在，而且正在变得越来越快。其他语言的程序可以被转成 JavaScript 语言，然后在浏览器中运行。2012年，单页面应用程序框架（single-page app framework）开始崛起，AngularJS 项目和 Ember 项目都发布了1.0版本。2012年，微软发布 TypeScript 语言。该语言被设计成 JavaScript 的超集，这意味着所有 JavaScript 程序，都可以不经修改地在 TypeScript 中运行。同时，TypeScript 添加了很多新的语法特性，主要目的是为了开发大型程序，然后还可以被编译成 JavaScript 运行。2012年，Mozilla 基金会提出 asm.js 规格。asm.js 是 JavaScript 的一个子集，所有符合 asm.js 的程序都可以在浏览器中运行，它的特殊之处在于语法有严格限定，可以被快速编译成性能良好的机器码。这样做的目的，是为了给其他语言提供一个编译规范，使其可以被编译成高效的 JavaScript 代码。同时，Mozilla 基金会还发起了 Emscripten 项目，目标就是提供一个跨语言的编译器，能够将 LLVM 的位代码（bitcode）转为 JavaScript 代码，在浏览器中运行。因为大部分 LLVM 位代码都是从 C / C++ 语言生成的，这意味着 C / C++ 将可以在浏览器中运行。此外，Mozilla 旗下还有 LLJS （将 JavaScript 转为 C 代码）项目和 River Trail （一个用于多核心处理器的 ECMAScript 扩展）项目。目前，可以被编译成 JavaScript 的语言列表，共有将近40种语言。2013年，Mozilla 基金会发布手机操作系统 Firefox OS，该操作系统的整个用户界面都使用 JavaScript。2013年，ECMA 正式推出 JSON 的国际标准，这意味着 JSON 格式已经变得与 XML 格式一样重要和正式了。2013年5月，Facebook 发布 UI 框架库 React，引入了新的 JSX 语法，使得 UI 层可以用组件开发，同时引入了网页应用是状态机的概念。2014年，微软推出 JavaScript 的 Windows 库 WinJS，标志微软公司全面支持 JavaScript 与 Windows 操作系统的融合。2014年11月，由于对 Joyent 公司垄断 Node 项目、以及该项目进展缓慢的不满，一部分核心开发者离开了 Node.js，创造了 io.js 项目，这是一个更开放、更新更频繁的 Node.js 版本，很短时间内就发布到了2.0版。三个月后，Joyent 公司宣布放弃对 Node 项目的控制，将其转交给新成立的开放性质的 Node 基金会。随后，io.js 项目宣布回归 Node，两个版本将合并。2015年3月，Facebook 公司发布了 React Native 项目，将 React 框架移植到了手机端，可以用来开发手机 App。它会将 JavaScript 代码转为 iOS 平台的 Objective-C 代码，或者 Android 平台的 Java 代码，从而为 JavaScript 语言开发高性能的原生 App 打开了一条道路。2015年4月，Angular 框架宣布，2.0 版将基于微软公司的TypeScript语言开发，这等于为 JavaScript 语言引入了强类型。2015年5月，Node 模块管理器 NPM 超越 CPAN，标志着 JavaScript 成为世界上软件模块最多的语言。2015年5月，Google 公司的 Polymer 框架发布1.0版。该项目的目标是生产环境可以使用 WebComponent 组件，如果能够达到目标，Web 开发将进入一个全新的以组件为开发基础的阶段。2015年6月，ECMA 标准化组织正式批准了 ECMAScript 6 语言标准，定名为《ECMAScript 2015 标准》。JavaScript 语言正式进入了下一个阶段，成为一种企业级的、开发大规模应用的语言。这个标准从提出到批准，历时10年，而 JavaScript 语言从诞生至今也已经20年了。2015年6月，Mozilla 在 asm.js 的基础上发布 WebAssembly 项目。这是一种 JavaScript 引擎的中间码格式，全部都是二进制，类似于 Java 的字节码，有利于移动设备加载 JavaScript 脚本，执行速度提高了 20+ 倍。这意味着将来的软件，会发布 JavaScript 二进制包。2016年6月，《ECMAScript 2016 标准》发布。与前一年发布的版本相比，它只增加了两个较小的特性。2017年6月，《ECMAScript 2017 标准》发布，正式引入了 async 函数，使得异步操作的写法出现了根本的变化。2017年11月，所有主流浏览器全部支持 WebAssembly，这意味着任何语言都可以编译成 JavaScript，在浏览器运行。参考链接Axel Rauschmayer, The Past, Present, and Future of JavaScriptJohn Dalziel, The race for speed part 4: The future for JavaScriptAxel Rauschmayer, Basic JavaScript for the impatient programmerresin.io, Happy 18th Birthday JavaScript! A look at an unlikely past and bright future","categories":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"javascript - 入门篇 - 导论","slug":"javascript - 入门篇 - 导论","date":"2018-09-17T14:32:21.672Z","updated":"2018-09-17T15:38:17.789Z","comments":true,"path":"2018/09/17/javascript - 入门篇 - 导论/","link":"","permalink":"http://yoursite.com/2018/09/17/javascript - 入门篇 - 导论/","excerpt":"","text":"原文作者：阮一峰 原文地址：https://wangdoc.com/文章系转载，仅供个人学习和参考什么是 JavaScript 语言？JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。JavaScript 也是一种嵌入式（embedded）语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。JavaScript 本身不提供任何与 I/O（输入/输出）相关的 API，都要靠宿主环境（host）提供，所以 JavaScript 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。从语法角度看，JavaScript 语言是一种“对象模型”语言。各种宿主环境通过这个模型，描述自己的功能和操作接口，从而通过 JavaScript 控制这些功能。但是，JavaScript 并不是纯粹的“面向对象语言”，还支持其他编程范式（比如函数式编程）。这导致几乎任何一个问题，JavaScript 都有多种解决方法。阅读本书的过程中，你会诧异于 JavaScript 语法的灵活性。JavaScript 的核心语法部分相当精简，只包括两个部分：基本的语法构造（比如操作符、控制结构、语句）和标准库（就是一系列具有各种功能的对象比如Array、Date、Math等）。除此之外，各种宿主环境提供额外的 API（即只能在该环境使用的接口），以便 JavaScript 调用。以浏览器为例，它提供的额外 API 可以分成三大类。· 浏览器控制类：操作浏览器· DOM 类：操作网页的各种元素· Web 类：实现互联网的各种功能如果宿主环境是服务器，则会提供各种操作系统的 API，比如文件操作 API、网络通信 API等等。这些你都可以在 Node 环境中找到。本书主要介绍 JavaScript 核心语法和浏览器网页开发的基本知识，不涉及 Node。全书可以分成以下四大部分。·基本语法·标准库·浏览器 API·DOMJavaScript 语言有多个版本。本书的内容主要基于 ECMAScript 5.1 版本，这是学习 JavaScript 语法的基础。ES6 和更新的语法请参考我写的《ECMAScript 6入门》。为什么学习 JavaScript？JavaScript 语言有一些显著特点，使得它非常值得学习。它既适合作为学习编程的入门语言，也适合当作日常开发的工作语言。它是目前最有希望、前途最光明的计算机语言之一。操控浏览器的能力JavaScript 的发明目的，就是作为浏览器的内置脚本语言，为网页开发者提供操控浏览器的能力。它是目前唯一一种通用的浏览器脚本语言，所有浏览器都支持。它可以让网页呈现各种特殊效果，为用户提供良好的互动体验。目前，全世界几乎所有网页都使用 JavaScript。如果不用，网站的易用性和使用效率将大打折扣，无法成为操作便利、对用户友好的网站。对于一个互联网开发者来说，如果你想提供漂亮的网页、令用户满意的上网体验、各种基于浏览器的便捷功能、前后端之间紧密高效的联系，JavaScript 是必不可少的工具。广泛的使用领域近年来，JavaScript 的使用范围，慢慢超越了浏览器，正在向通用的系统语言发展。（1）浏览器的平台化随着 HTML5 的出现，浏览器本身的功能越来越强，不再仅仅能浏览网页，而是越来越像一个平台，JavaScript 因此得以调用许多系统功能，比如操作本地文件、操作图片、调用摄像头和麦克风等等。这使得 JavaScript 可以完成许多以前无法想象的事情。（2）NodeNode 项目使得 JavaScript 可以用于开发服务器端的大型项目，网站的前后端都用 JavaScript 开发已经成为了现实。有些嵌入式平台（Raspberry Pi）能够安装 Node，于是 JavaScript 就能为这些平台开发应用程序。（3）数据库操作JavaScript 甚至也可以用来操作数据库。NoSQL 数据库这个概念，本身就是在 JSON（JavaScript Object Notation）格式的基础上诞生的，大部分 NoSQL 数据库允许 JavaScript 直接操作。基于 SQL 语言的开源数据库 PostgreSQL 支持 JavaScript 作为操作语言，可以部分取代 SQL 查询语言。（4）移动平台开发JavaScript 也正在成为手机应用的开发语言。一般来说，安卓平台使用 Java 语言开发，iOS 平台使用 Objective-C 或 Swift 语言开发。许多人正在努力，让 JavaScript 成为各个平台的通用开发语言。PhoneGap 项目就是将 JavaScript 和 HTML5 打包在一个容器之中，使得它能同时在 iOS 和安卓上运行。Facebook 公司的 React Native 项目则是将 JavaScript 写的组件，编译成原生组件，从而使它们具备优秀的性能。Mozilla 基金会的手机操作系统 Firefox OS，更是直接将 JavaScript 作为操作系统的平台语言，但是很可惜这个项目没有成功。（5）内嵌脚本语言越来越多的应用程序，将 JavaScript 作为内嵌的脚本语言，比如 Adobe 公司的著名 PDF 阅读器 Acrobat、Linux 桌面环境 GNOME 3。（6）跨平台的桌面应用程序Chromium OS、Windows 8 等操作系统直接支持 JavaScript 编写应用程序。Mozilla 的 Open Web Apps 项目、Google 的 Chrome App 项目、Github 的 Electron 项目、以及 TideSDK 项目，都可以用来编写运行于 Windows、Mac OS 和 Android 等多个桌面平台的程序，不依赖浏览器。（7）小结可以预期，JavaScript 最终将能让你只用一种语言，就开发出适应不同平台（包括桌面端、服务器端、手机端）的程序。早在2013年9月的统计之中，JavaScript 就是当年 Github 上使用量排名第一的语言。著名程序员 Jeff Atwood 甚至提出了一条 “Atwood 定律”：“所有可以用 JavaScript 编写的程序，最终都会出现 JavaScript 的版本。”(Any application that can be written in JavaScript will eventually be written in JavaScript.)易学性相比学习其他语言，学习 JavaScript 有一些有利条件。（1）学习环境无处不在只要有浏览器，就能运行 JavaScript 程序；只要有文本编辑器，就能编写 JavaScript 程序。这意味着，几乎所有电脑都原生提供 JavaScript 学习环境，不用另行安装复杂的 IDE（集成开发环境）和编译器。（2）简单性相比其他脚本语言（比如 Python 或 Ruby），JavaScript 的语法相对简单一些，本身的语法特性并不是特别多。而且，那些语法中的复杂部分，也不是必需要学会。你完全可以只用简单命令，完成大部分的操作。（3）与主流语言的相似性JavaScript 的语法很类似 C/C++ 和 Java，如果学过这些语言（事实上大多数学校都教），JavaScript 的入门会非常容易。必须说明的是，虽然核心语法不难，但是 JavaScript 的复杂性体现在另外两个方面。首先，它涉及大量的外部 API。JavaScript 要发挥作用，必须与其他组件配合，这些外部组件五花八门，数量极其庞大，几乎涉及网络应用的各个方面，掌握它们绝非易事。其次，JavaScript 语言有一些设计缺陷。某些地方相当不合理，另一些地方则会出现怪异的运行结果。学习 JavaScript，很大一部分时间是用来搞清楚哪些地方有陷阱。Douglas Crockford 写过一本有名的书，名字就叫《JavaScript: The Good Parts》，言下之意就是这门语言不好的地方很多，必须写一本书才能讲清楚。另外一些程序员则感到，为了更合理地编写 JavaScript 程序，就不能用 JavaScript 来写，而必须发明新的语言，比如 CoffeeScript、TypeScript、Dart 这些新语言的发明目的，多多少少都有这个因素。尽管如此，目前看来，JavaScript 的地位还是无法动摇。加之，语言标准的快速进化，使得 JavaScript 功能日益增强，而语法缺陷和怪异之处得到了弥补。所以，JavaScript 还是值得学习，况且它的入门真的不难。强大的性能JavaScript 的性能优势体现在以下方面。（1）灵活的语法，表达力强。JavaScript 既支持类似 C 语言清晰的过程式编程，也支持灵活的函数式编程，可以用来写并发处理（concurrent）。这些语法特性已经被证明非常强大，可以用于许多场合，尤其适用异步编程。JavaScript 的所有值都是对象，这为程序员提供了灵活性和便利性。因为你可以很方便地、按照需要随时创造数据结构，不用进行麻烦的预定义。JavaScript 的标准还在快速进化中，并不断合理化，添加更适用的语法特性。（2）支持编译运行。JavaScript 语言本身，虽然是一种解释型语言，但是在现代浏览器中，JavaScript 都是编译后运行。程序会被高度优化，运行效率接近二进制程序。而且，JavaScript 引擎正在快速发展，性能将越来越好。此外，还有一种 WebAssembly 格式，它是 JavaScript 引擎的中间码格式，全部都是二进制代码。由于跳过了编译步骤，可以达到接近原生二进制代码的运行速度。各种语言（主要是 C 和 C++）通过编译成 WebAssembly，就可以在浏览器里面运行。（3）事件驱动和非阻塞式设计。JavaScript 程序可以采用事件驱动（event-driven）和非阻塞式（non-blocking）设计，在服务器端适合高并发环境，普通的硬件就可以承受很大的访问量。开放性JavaScript 是一种开放的语言。它的标准 ECMA-262 是 ISO 国际标准，写得非常详尽明确；该标准的主要实现（比如 V8 和 SpiderMonkey 引擎）都是开放的，而且质量很高。这保证了这门语言不属于任何公司或个人，不存在版权和专利的问题。语言标准由 TC39 委员会负责制定，该委员会的运作是透明的，所有讨论都是开放的，会议记录都会对外公布。不同公司的 JavaScript 运行环境，兼容性很好，程序不做调整或只做很小的调整，就能在所有浏览器上运行。社区支持和就业机会全世界程序员都在使用 JavaScript，它有着极大的社区、广泛的文献和图书、丰富的代码资源。绝大部分你需要用到的功能，都有多个开源函数库可供选用。作为项目负责人，你不难招聘到数量众多的 JavaScript 程序员；作为开发者，你也不难找到一份 JavaScript 的工作。实验环境本教程包含大量的示例代码，只要电脑安装了浏览器，就可以用来实验了。读者可以一边读一边运行示例，加深理解。推荐安装 Chrome 浏览器，它的“开发者工具”（Developer Tools）里面的“控制台”（console），就是运行 JavaScript 代码的理想环境。进入 Chrome 浏览器的“控制台”，有两种方法。直接进入：按下Option + Command + J（Mac）或者Ctrl + Shift + J（Windows / Linux）开发者工具进入：开发者工具的快捷键是F12，或者Option + Command + I（Mac）以及Ctrl + Shift + I（Windows / Linux），然后选择 Console 面板进入控制台以后，就可以在提示符后输入代码，然后按Enter键，代码就会执行。如果按Shift + Enter键，就是代码换行，不会触发执行。建议阅读本教程时，将代码复制到控制台进行实验。作为尝试，你可以将下面的程序复制到“控制台”，按下回车后，就可以看到运行结果。123456function greetMe(yourName) &#123; console.log('Hello ' + yourName);&#125;greetMe('World')// Hello World","categories":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（一）","slug":" 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（一）","date":"2018-09-17T08:07:20.661Z","updated":"2018-09-17T08:32:16.644Z","comments":true,"path":"2018/09/17/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（一）/","link":"","permalink":"http://yoursite.com/2018/09/17/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（一）/","excerpt":"","text":"有这般汉，误认禅宗“不立文字”之旨，妄执离言，不知离言即言、言即离言，立而不立、言而无言；有这般汉，误认禅那、禅定、坐禅为禅，如磨砖求镜，可笑可怜；有这般汉，误认解脱是禅，不知可解脱者非解脱，真解脱者无解脱，无人缚尔，谁求解脱？有这般汉，误认上帝一类物事是禅，而禅者非生非灭，即生即灭，与上帝等臆测之物何干？有这般汉，误认佛境界为禅，不知佛魔一如、净污无二，非佛非魔、即佛即魔，踏破毗卢顶上行，天堂地狱任来往，谁佛谁境界？有这般汉，误认我是禅、心即佛，不知禅者非心非佛、即心即佛，我而非我、非我而我；有这般汉，误认无修无证为禅，而有修有证又何曾有修有证，修而无修、证而无证，禅者，非修即修、非证即证，本无可证、证无可本，又无修无证何为？有这般汉，误认任运自然为禅，而谁任谁运？无自非然、无然非自，非任非运、非自非然，任运非自然、自然非任运；有这般汉，误认一切皆空为禅，而一切即空、空即一切，一切皆空非空，空无可空、可空非空；有这般汉，误认平常心是禅，而何心不平常？心本无心、无心而心，平常非常、非常而常；有这般汉，误认禅者可参可入，而可参非参、可入非入，谁参谁入？禅者，不废一法、不立一法、不剩一法、不欠一法，不有一法、不无一法。见禅者，不为禅；不见禅者，亦不为禅。何之为禅？禅即一切、一切即禅；何之非禅？禅非一切、一切非禅。如执明心见性为禅者，亦为大误也。可明非明、可见非见，无明本明、无见本见，明心见性也大似无病求药矣。达摩东来、幻海尘起，引得无头蝇儿逐此臭肉而喧哗大动。诗曰：曹源一滴曹源水，嵩岳千重嵩岳山。今古骷髅今古眼，乾坤声裂血斑斓。","categories":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/categories/缠中说禅/"}],"tags":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/tags/缠中说禅/"},{"name":"数学","slug":"数学","permalink":"http://yoursite.com/tags/数学/"}]},{"title":"缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（序）","slug":" 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（序）","date":"2018-09-15T15:49:36.949Z","updated":"2018-09-17T08:32:22.910Z","comments":true,"path":"2018/09/15/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（序）/","link":"","permalink":"http://yoursite.com/2018/09/15/ 缠中说禅：缠非缠、禅非禅，枯木龙吟照大千（序）/","excerpt":"","text":"倘无禅宗，曾以儒道为主之中华古文化，本不足道；倘无禅宗，中华古文明亦难至如今不可企及之高度。蓋中华古文明、中华古文化，得禅宗而孤峰直上、傲然于世。宋明理学、心学，窃禅宗之残羹冷炙犹可蔚为大观，岂论禅宗哉！达磨东来，只履西归。壁立千峰，拈花之旨于挑水担柴间逗漏；花开五叶，救世之心从名宗判教处显扬。玄沙云：“若论此事，喻如一片田地，四至界分结契卖与诸人了也，只有中心树子犹属老僧在。”穷诸玄辩，竭世枢机，若太虚一毫，似巨壑一滴。永明曰：“一夏与兄弟东语西话，看翠岩眉毛在么？”。人人无始以来，东语西话、此生彼灭，且看眉毛在么？世间、出世间一切学问、知识，无论哲学、科学、艺术、宗教、社会、信仰，诸如此类、三教九流、东圣西哲、神魔鬼怪，皆不出此“穷诸玄辩，竭世枢机”矣。徒叹一毫置太虚、一滴投巨壑者，大似无病呻吟，岂知太虚置一毫、巨壑投一滴，缠非缠、禅非禅，枯木龙吟照大千哉！千载以来，谈禅成缠，以学问、实践为禅者，古今多矣。焉知禅者，非学问即学问，非实践即实践，非知即知，非行即行，非心即心，非物即物乎？诸如学问、实践、知行、心物者，皆无端自缠自绑也！蓋禅宗，自云门、法眼以来，公案、话头诸法门大开，而宗门日益凋零。所谓各派宗师，自眼不明、盲传瞎练，禅于此而日益学问化、实践化、儒道化、政治化、神秘化，其败不足怪矣。倘以禅宗为儒道之文字学问、身心修炼，则其解可笑而可怜也。禅者，天地不能盖、古今不能载，非心非物，即心即物，岂可画地自牢、徒困化城哉！世之无禅，如人之无眼。人之无眼，犹可以耳舌鼻身意替之；世之无禅，则替无可替矣。然禅者，无得无失，吾非忧禅之无，忧世人之失眼而老婆心切固有此书矣。本书以最平实之角度、最深广之宽度，还禅宗之本来面目、呈中西文化最深层之交锋，析世间哲学、科学、艺术、宗教、社会等最全面之问题。此间，惟以见地、不以名闻，古今名哲、大德皆难逃检点，狮子、野狐，不辩而自辩也。诗曰：渺渺天涯渺渺秋，绮霞烟水自空流。谁怜西岭西风后，满地相思满地愁！满城风雨满城秋，一水横空天地流。独上孤峰倾百斗，披云啸尽古今愁。一番风雨一番秋，依旧青山枕碧流。溅血长虹贯天地，羲和鞭堕六龙愁。万古长空春复秋，一朝风月乍星流。乱峰深处斜阳下，木落花飞愁自愁。","categories":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/categories/缠中说禅/"}],"tags":[{"name":"缠中说禅","slug":"缠中说禅","permalink":"http://yoursite.com/tags/缠中说禅/"},{"name":"数学","slug":"数学","permalink":"http://yoursite.com/tags/数学/"}]},{"title":"使用hexo+github搭建个人博客","slug":"使用hexo+github搭建个人博客","date":"2018-09-15T10:45:17.992Z","updated":"2018-09-17T14:56:28.582Z","comments":true,"path":"2018/09/15/使用hexo+github搭建个人博客/","link":"","permalink":"http://yoursite.com/2018/09/15/使用hexo+github搭建个人博客/","excerpt":"","text":"安装node.js，安装git for windows。所有必备的应用程序安装完成后，创建一个文件夹（用来存放所有blog的东西），然后在该文件夹下使用 npm 安装 Hexo。（所有命令建议使用git的终端来执行）1npm install -g hexo-cli过程有点慢以为没反应失败，其实一直在安装，建议切换npm镜像1npm config set registry &quot;https://registry.npm.taobao.org&quot;设置淘宝镜像源后，很快就安装完毕了。安装 Hexo 完成后，请执行下列命令，Hexo 将会在该文件夹中新建所需要的文件。12hexo init npm install到此，Hexo安装完成。hexo常用命令常见命令1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本缩写：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy组合命令：12hexo s -g #生成并本地预览hexo d -g #生成并上传Github Pages设置什么是Github PagesGitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是yourgithubname.github.io，这是特殊的命名约定。你可以通过http://yourgithubname.github.io 来访问你的个人主页。需要注意的个人主页的网站内容是在master分支下的。创建Github Pages在github创建了一个repo叫做 hombinwong.github.io. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接http://hombinwong.github.io/ 访问了。Hexo搭桥到github首先需要明白部署到github的原理。之前在Github上创建的那个特别的仓库（hombinwong.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http://hombinwong.github.io来直接访问。Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。需要将hexo生成的静态网站，提交(git commit)到github上。配置SHH Key如果你之前已经配置好git个人信息，请跳过这一个步骤设置Git的user name和email：(如果是第一次的话)12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;your email&quot;生成密钥1ssh-keygen -t rsa -C &quot;your email&quot;连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\\Users\\Administrator.ssh）。打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key。将id_rsa.pub文件里的key粘贴到key那里，title随便填，保存。配置Deployment打开 站点配置文件_config.yml，找到deploy，然后按照如下修改：（PS:如果要配多个deploy，type前面加-）1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master比如我的仓库的地址是hombinwong.github.io，所以配置如下：12345deploy:- type: git repository: git@github.com:hombinwong/hombinwong.github.io.git branch: master- type: baidu_url_submitter ## 推送到百度搜索安装部署到github的插件：1npm install hexo-deployer-git --save执行命令(建议每次都按照如下步骤部署)：12hexo ghexo d在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客。绑定个人域名当然，你不绑定域名肯定也是可以的，就用默认的 yourgithubname.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。首先注册一个域名，域名注册推荐去阿里云，本来想用.me域名，不过现在这些非主流的域名工信部还没有纳入备案的条件，如目前的.online,.xyz,.me等都不能备案。如果有需要可以绑定国外服务器，这样就不需要备案了，比如godaddy。绑定域名分2种情况：带www和不带www的。域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下yourgithubname.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向yourgithubname.github.io，这样可以保证无论是否添加www都可以访问，如下：然后到你的Hexo/source目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试：如果你填写的是没有www的，比如 wanghongbin.top，那么无论是访问 http://www.wanghongbin.top 还是 http://wanghongbin.top，都会自动跳转到 http://wanghongbin.top如果你填写的是带www的，比如 www.wanghongbin.top ，那么无论是访问 http://www.wanghongbin.top还是 http://wanghongbin.top，都会自动跳转到 http://www.wanghongbin.top另外说一句，在你绑定了新域名之后，原来的yourgithubname.github.io并没有失效，而是会自动跳转到你的新域名。发表博客写博客定位到我们的hexo根目录，执行命令：1hexo new &apos;my-first-blog&apos;然后你就可以在source/_posts路径下看到生成的相关md文件。我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。关于具体的文章编辑可以看下官网的介绍。让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？在合适的位置加上&lt;!--more--&gt;即可。例如：写博客工具markdown语法参考markdown。markdown编辑器推荐一个极致简洁的：Typora。图床，推荐七牛+MPic-图床神器 组合。参考https://hexo.io/zh-cn/docs/index.html","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"gitpage","slug":"gitpage","permalink":"http://yoursite.com/tags/gitpage/"}]},{"title":"安家,熟悉以下 markdown 语法","slug":"hello-world","date":"2018-09-14T03:20:15.634Z","updated":"2018-09-17T07:29:03.431Z","comments":true,"path":"2018/09/14/hello-world/","link":"","permalink":"http://yoursite.com/2018/09/14/hello-world/","excerpt":"","text":"一级标题……六级标题然后巴拉巴拉……加粗倾斜 *～ 删除 ～引用— 分割线谷歌列表内容列表内容列表内容表头表头表头内容内容内容内容内容内容第二行分割表头和内容。有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略123 &lt;div&gt; &lt;p&gt; code &lt;/p&gt;&lt;/div&gt;","categories":[],"tags":[]}]}